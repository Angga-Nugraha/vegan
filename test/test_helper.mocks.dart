// Mocks generated by Mockito 5.4.4 from annotations
// in vegan/test/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:convert' as _i19;
import 'dart:typed_data' as _i20;

import 'package:dartz/dartz.dart' as _i3;
import 'package:http/http.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:vegan/core/failure.dart' as _i11;
import 'package:vegan/data/datasource/auth_remote_datasource.dart' as _i15;
import 'package:vegan/data/datasource/product_remote_datasource.dart' as _i18;
import 'package:vegan/data/datasource/user_remote_datasource.dart' as _i7;
import 'package:vegan/data/model/auth_model.dart' as _i4;
import 'package:vegan/data/model/product_model.dart' as _i5;
import 'package:vegan/data/model/user_model.dart' as _i2;
import 'package:vegan/domain/entities/auth.dart' as _i14;
import 'package:vegan/domain/entities/product.dart' as _i17;
import 'package:vegan/domain/entities/user.dart' as _i12;
import 'package:vegan/domain/repositories/auth_repositories.dart' as _i13;
import 'package:vegan/domain/repositories/product_repositories.dart' as _i16;
import 'package:vegan/domain/repositories/user_repository.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserModel_0 extends _i1.SmartFake implements _i2.UserModel {
  _FakeUserModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthModel_2 extends _i1.SmartFake implements _i4.AuthModel {
  _FakeAuthModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductModel_3 extends _i1.SmartFake implements _i5.ProductModel {
  _FakeProductModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_4 extends _i1.SmartFake implements _i6.Response {
  _FakeResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_5 extends _i1.SmartFake
    implements _i6.StreamedResponse {
  _FakeStreamedResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRemoteDatasource extends _i1.Mock
    implements _i7.UserRemoteDatasource {
  MockUserRemoteDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.UserModel> getCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue: _i8.Future<_i2.UserModel>.value(_FakeUserModel_0(
          this,
          Invocation.method(
            #getCurrentUser,
            [],
          ),
        )),
      ) as _i8.Future<_i2.UserModel>);

  @override
  _i8.Future<_i2.UserModel> updateUser(_i2.UserModel? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [user],
        ),
        returnValue: _i8.Future<_i2.UserModel>.value(_FakeUserModel_0(
          this,
          Invocation.method(
            #updateUser,
            [user],
          ),
        )),
      ) as _i8.Future<_i2.UserModel>);

  @override
  _i8.Future<String> changePassword(
    String? curentPass,
    String? newPass,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #changePassword,
          [
            curentPass,
            newPass,
          ],
        ),
        returnValue: _i8.Future<String>.value(_i9.dummyValue<String>(
          this,
          Invocation.method(
            #changePassword,
            [
              curentPass,
              newPass,
            ],
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<_i2.UserModel> changeAddress(_i2.AddressModel? address) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeAddress,
          [address],
        ),
        returnValue: _i8.Future<_i2.UserModel>.value(_FakeUserModel_0(
          this,
          Invocation.method(
            #changeAddress,
            [address],
          ),
        )),
      ) as _i8.Future<_i2.UserModel>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i10.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.Either<_i11.Failure, _i12.User>> getCurrentUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue: _i8.Future<_i3.Either<_i11.Failure, _i12.User>>.value(
            _FakeEither_1<_i11.Failure, _i12.User>(
          this,
          Invocation.method(
            #getCurrentUser,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i11.Failure, _i12.User>>);

  @override
  _i8.Future<_i3.Either<_i11.Failure, _i12.User>> updateUser(_i12.User? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [user],
        ),
        returnValue: _i8.Future<_i3.Either<_i11.Failure, _i12.User>>.value(
            _FakeEither_1<_i11.Failure, _i12.User>(
          this,
          Invocation.method(
            #updateUser,
            [user],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i11.Failure, _i12.User>>);

  @override
  _i8.Future<_i3.Either<_i11.Failure, _i12.User>> changeAddress(
          _i12.Address? address) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeAddress,
          [address],
        ),
        returnValue: _i8.Future<_i3.Either<_i11.Failure, _i12.User>>.value(
            _FakeEither_1<_i11.Failure, _i12.User>(
          this,
          Invocation.method(
            #changeAddress,
            [address],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i11.Failure, _i12.User>>);

  @override
  _i8.Future<_i3.Either<_i11.Failure, String>> changePassword(
    String? currentPassword,
    String? newPassword,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #changePassword,
          [
            currentPassword,
            newPassword,
          ],
        ),
        returnValue: _i8.Future<_i3.Either<_i11.Failure, String>>.value(
            _FakeEither_1<_i11.Failure, String>(
          this,
          Invocation.method(
            #changePassword,
            [
              currentPassword,
              newPassword,
            ],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i11.Failure, String>>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i13.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.Either<_i11.Failure, _i14.Auth>> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i8.Future<_i3.Either<_i11.Failure, _i14.Auth>>.value(
            _FakeEither_1<_i11.Failure, _i14.Auth>(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i11.Failure, _i14.Auth>>);

  @override
  _i8.Future<_i3.Either<_i11.Failure, String>> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i8.Future<_i3.Either<_i11.Failure, String>>.value(
            _FakeEither_1<_i11.Failure, String>(
          this,
          Invocation.method(
            #logout,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i11.Failure, String>>);

  @override
  _i8.Future<_i3.Either<_i11.Failure, String>> register(_i12.User? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [user],
        ),
        returnValue: _i8.Future<_i3.Either<_i11.Failure, String>>.value(
            _FakeEither_1<_i11.Failure, String>(
          this,
          Invocation.method(
            #register,
            [user],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i11.Failure, String>>);
}

/// A class which mocks [AuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRemoteDataSource extends _i1.Mock
    implements _i15.AuthRemoteDataSource {
  MockAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i4.AuthModel> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i8.Future<_i4.AuthModel>.value(_FakeAuthModel_2(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i8.Future<_i4.AuthModel>);

  @override
  _i8.Future<String> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i8.Future<String>.value(_i9.dummyValue<String>(
          this,
          Invocation.method(
            #logout,
            [],
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<String> register(_i2.UserModel? user) => (super.noSuchMethod(
        Invocation.method(
          #register,
          [user],
        ),
        returnValue: _i8.Future<String>.value(_i9.dummyValue<String>(
          this,
          Invocation.method(
            #register,
            [user],
          ),
        )),
      ) as _i8.Future<String>);
}

/// A class which mocks [ProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRepository extends _i1.Mock implements _i16.ProductRepository {
  MockProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.Either<_i11.Failure, List<_i17.Product>>> getAllproduct() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllproduct,
          [],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i11.Failure, List<_i17.Product>>>.value(
                _FakeEither_1<_i11.Failure, List<_i17.Product>>(
          this,
          Invocation.method(
            #getAllproduct,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i11.Failure, List<_i17.Product>>>);

  @override
  _i8.Future<_i3.Either<_i11.Failure, _i17.Product>> getProductDetail(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductDetail,
          [id],
        ),
        returnValue: _i8.Future<_i3.Either<_i11.Failure, _i17.Product>>.value(
            _FakeEither_1<_i11.Failure, _i17.Product>(
          this,
          Invocation.method(
            #getProductDetail,
            [id],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i11.Failure, _i17.Product>>);

  @override
  _i8.Future<_i3.Either<_i11.Failure, List<_i17.Product>>> search(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [query],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i11.Failure, List<_i17.Product>>>.value(
                _FakeEither_1<_i11.Failure, List<_i17.Product>>(
          this,
          Invocation.method(
            #search,
            [query],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i11.Failure, List<_i17.Product>>>);
}

/// A class which mocks [ProductRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRemoteDatasource extends _i1.Mock
    implements _i18.ProductRemoteDatasource {
  MockProductRemoteDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i5.ProductModel>> getAllProduct() => (super.noSuchMethod(
        Invocation.method(
          #getAllProduct,
          [],
        ),
        returnValue:
            _i8.Future<List<_i5.ProductModel>>.value(<_i5.ProductModel>[]),
      ) as _i8.Future<List<_i5.ProductModel>>);

  @override
  _i8.Future<_i5.ProductModel> getProductDetail(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductDetail,
          [id],
        ),
        returnValue: _i8.Future<_i5.ProductModel>.value(_FakeProductModel_3(
          this,
          Invocation.method(
            #getProductDetail,
            [id],
          ),
        )),
      ) as _i8.Future<_i5.ProductModel>);

  @override
  _i8.Future<List<_i5.ProductModel>> search(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [query],
        ),
        returnValue:
            _i8.Future<List<_i5.ProductModel>>.value(<_i5.ProductModel>[]),
      ) as _i8.Future<List<_i5.ProductModel>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i6.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i6.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<String>.value(_i9.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<_i20.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i20.Uint8List>.value(_i20.Uint8List(0)),
      ) as _i8.Future<_i20.Uint8List>);

  @override
  _i8.Future<_i6.StreamedResponse> send(_i6.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i8.Future<_i6.StreamedResponse>.value(_FakeStreamedResponse_5(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i8.Future<_i6.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
